{"version":3,"sources":["../webpack/universalModuleDefinition","configurations/constants.ts","configurations/combineUrl.ts","configurations/index.ts","configurations/configuration.dev.ts","configurations/configuration.pro.ts","serviceWorker.ts","index.tsx","services/tokenService.ts","middleware/axiosMiddleware.ts","middleware/antdMiddleware.tsx","middleware/globalMiddleware.ts","middleware/index.ts","pages/exception/NotFound.tsx","App.tsx"],"names":["root","factory","exports","module","define","amd","this","BaseUrl","upstreams","document","location","protocol","OPEN_API_URL","combineUrl","upstream","baseName","Error","window","configurations","whiteHosts","publicUrl","OPEN_IMG_URL","Boolean","hostname","match","app","Friday","onInjectConfigBefore","console","log","onInjectConfigAfter","onInjectRouterAfter","onStarted","configuration","injectConfigurations","use","require","default","injectRouters","start","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","tokenName","v","warn","Cookie","set","get","remove","getConfiguration","history","axiosConifg","baseURL","timeout","headers","errorNotice","text","response","redirect","nextUrl","pathname","replace","axiosInstance","httpAxios","requestSuccessHook","config","token","TokenService","responseErrorHooks","status","code","indexOf","isApiTimeout","isNetworkError","Promise","reject","data","Object","prototype","toString","call","type","reader","FileReader","readAsText","onload","JSON","parse","result","notice","axios_middleware","request_middleware","validateMessages","required","antd_middleware","App","props","form","locale","zhCN","GlobalState_middleware","userInfo","globalLoading","global_middleware","middleware","middlewares","useGlobalContext","Notfind","title","subTitle","path","exact","component","NotFound"],"mappings":"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","file":"static/js/main.b81049ca.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"appweb-main\"] = factory();\n\telse\n\t\troot[\"appweb-main\"] = factory();\n})(this, function() {\nreturn ","\n\nexport const protocol = document.location.protocol\nexport const upstreams = {\n\tdevelopment: {\n\t\tOPEN_API_URL: '101.42.95.249:8088',\n\t},\n\tproduction: {\n\t\tOPEN_API_URL: '101.42.95.249:8088',\n\t}\n\n}\n\nexport enum BaseUrl {\n\tOPEN_API_URL = 'api',\n}\n","\n\nconst combineUrl = (upstream: string, baseName: string, ) => {\n\n\tif (!upstream) {\n\t\tthrow new Error(`ConfigError upstream is empty`)\n\t}\n\n\tif (baseName) return `${window.location.protocol}//${upstream}/${baseName}`\n\n\treturn `${window.location.protocol}//${upstream}`\n}\n\n\nexport default combineUrl","\nimport configuration_dev from './configuration.dev'\nimport configuration_pro from './configuration.pro'\n\n\nconst configurations = [\n\tconfiguration_dev,\n\tconfiguration_pro\n]\n\nexport default configurations","import { IConfiguration } from '@friday/core'\n\nimport { upstreams, BaseUrl } from './constants'\n\nimport combineUrl from './combineUrl'\n\nconst configuration: IConfiguration = {\n\twhiteHosts: [\n\t\t'localhost:3000',\n\t],\n\tpublicUrl: {\n\t\tOPEN_API_URL: combineUrl(upstreams.development.OPEN_API_URL, BaseUrl.OPEN_API_URL),\n\t\tOPEN_IMG_URL: combineUrl(upstreams.development.OPEN_API_URL, '')\n\t}\n}\n\nexport default configuration\n","import { IConfiguration } from '@friday/core'\nimport { upstreams, BaseUrl, protocol } from './constants'\nimport combineUrl from './combineUrl'\n\nconst configuration: IConfiguration = {\n\twhiteHosts: [\n\t\t'localhost:3009',\n\t\t'101.42.95.249:9005',\n\t\t'test.ruien.work',\n\t\t'test.ruien.work:9005',\n\t\t'joinus.hoo-woo.cn'\n\t],\n\tpublicUrl: {\n\t\tOPEN_API_URL: combineUrl(upstreams.production.OPEN_API_URL, BaseUrl.OPEN_API_URL),\n\t\tOPEN_IMG_URL: combineUrl(upstreams.production.OPEN_API_URL, '')\n\t}\n}\n\nexport default configuration\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport Friday from '@friday/core'\n\n// 如果是微服务中的slave 需要添加该文件在entry 入口上方\n// import '@friday/micro/lib/public-path'\n\nimport configurations from 'src/configurations'\n\n\nimport * as serviceWorker from 'src/serviceWorker'\n\nconst app = new Friday({\n    onInjectConfigBefore() {\n        console.log('onInjectConfigBefore hook')\n    },\n    onInjectConfigAfter() {\n        console.log('onInjectConfigAfter hook')\n    },\n    onInjectRouterAfter() {\n        console.log('onInjectConfigAfter hook')\n    },\n    onStarted(configuration) {\n        console.log('onInjectConfigAfter hook')\n    }\n})\n\n// 注入配置\napp.injectConfigurations(configurations)\n\n// api 模块插件\napp.use(require('./middleware').default)\n\n// 注入路由\napp.injectRouters(require('./App').default)\n\n// 启动器\napp.start('#root')\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n","import Cookie from 'js-cookie'\n\nexport const TOKEN_NAME = 'Token'\n\nclass TokenService<T extends string > {\n\n    private readonly tokenName: string = TOKEN_NAME\n\n    public set(v: T): void {\n        if (typeof v !== 'string') {\n            return console.warn(`Token accept string key. but params is ${typeof v}`)\n        }\n        Cookie.set(this.tokenName, v)\n    }\n\n    public get(): string | undefined {\n        return Cookie.get(this.tokenName) \n    }\n\n    public clear(): void {\n        return Cookie.remove(this.tokenName)\n    } \n\n    public isAuthenticated(): boolean {\n        return !!this.get()\n    }\n}\n\nexport default new TokenService<string>()","\nimport { getConfiguration } from '@friday/core'\nimport { httpAxios, request_middleware } from '@friday/async'\nimport TokenService from 'src/services/tokenService'\nimport { message } from 'antd'\nimport { debounce, get, includes } from 'lodash'\n\nconst { publicUrl, history } = getConfiguration()\n\nexport const axiosConifg = {\n\tbaseURL: publicUrl.OPEN_API_URL,\n\ttimeout: 20000,\n\theaders: {\n\t\t'Accept': 'application/json;charset=utf-8',\n\t\t'Content-Type': 'application/json;charset=utf-8',\n\t}\n}\n\nconst errorNotice = debounce((text, response?) => {\n\tmessage.error(text)\n\t// sentry 上报\n}, 500)\n\nconst AUTH_PATH = '/'\n\nexport const isApiTimeout = (error): boolean => {\n\treturn error.code === 'ECONNABORTED' && error.message.indexOf('timeout') !== -1\n}\n\nexport const isNetworkError = (error): boolean => {\n\treturn error.message === 'Network Error'\n}\n\nconst redirect = debounce(() => {\n\tconst nextUrl = `${AUTH_PATH}?path=${location.pathname}`\n\treturn history.replace(nextUrl)\n}, 500)\n\n\nexport const axiosInstance = httpAxios(axiosConifg, {\n\trequestSuccessHook(config) {\n\t\treturn { ...config, headers: { ...config.headers, token: TokenService.get() } }\n\t},\n\tresponseErrorHooks(error) {\n\t\tconst status = error.response.status\n\t\t// 超时、网络异常\n\t\tif (isApiTimeout(error)) {\n\t\t\t// eslint-disable-next-line\n\t\t\terrorNotice('接口请求超时')\n\t\t}\n\n\t\tif (isNetworkError(error)) {\n\t\t\terrorNotice('网络异常')\n\t\t}\n\n\t\tif (error.response && status === 401) {\n\t\t\terrorNotice('登录超时')\n\t\t\tredirect()\n\t\t\treturn Promise.reject(error)\n\t\t}\n\n\t\t// 系统错误\n\t\tif (error.response && status >= 400) {\n\t\t\tconst { data } = error.response\n\t\t\t// blob to  json\n\t\t\tif (Object.prototype.toString.call(data) === \"[object Blob]\" && (data.type === 'application/json')) {\n\t\t\t\tlet reader = new FileReader() as any\n\t\t\t\treader.readAsText(data, 'utf-8');\n\t\t\t\treader.onload = () => {\n\t\t\t\t\tconst text = JSON.parse(reader.result)\n\t\t\t\t\tmessage.error(text.message)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst notice = get(error, 'response.data.msg') || '系统异常'\n\t\t\t\terrorNotice(notice, error.response)\n\t\t\t\tconsole.error(error.response, 'system error')\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(error)\n\t}\n})\n\nconst axios_middleware = request_middleware({axiosInstance})\n\nexport default axios_middleware\n","import React from 'react'\nimport zhCN from 'antd/lib/locale/zh_CN'\nimport 'moment/locale/zh-cn'\nimport { ConfigProvider } from 'antd'\n\n\nconst validateMessages = {\n  required: \"请填写，该字段是必填字段！\",\n  // ...\n};\n\nconst antd_middleware = ({ App, config }) => {\n\n\treturn {\n\t\tApp(props) {\n\t\t\treturn (\n\t\t\t\t<ConfigProvider form={{validateMessages}} locale = {zhCN}>\n\t\t\t\t\t<App { ...props } />\n\t\t\t\t</ConfigProvider>\n\t\t\t)\n\t\t},\n\t\tconfig\n\t}\n}\n\nexport default antd_middleware","import { GlobalState_middleware } from '@friday/core'\n\n\nexport const { middleware: global_middleware, useGlobalContext } = GlobalState_middleware({ \n\tuserInfo: {},\n\tglobalLoading: false\n})\n\n\nexport default global_middleware","\nimport axios_middleware from './axiosMiddleware'\nimport antd_middleware from './antdMiddleware'\nimport { global_middleware } from './globalMiddleware'\n\nconst middlewares = [\n\tantd_middleware,\n\taxios_middleware,\n\tglobal_middleware,\n]\n\nexport default middlewares\n","import React from 'react'\nimport { Result, Button } from 'antd'\nimport { Link } from '@friday/router'\n\nconst Notfind = () => {\n\treturn (\n\t\t<Result\n\t\t\tstatus=\"404\"\n\t\t\ttitle=\"网站正在建设中\"\n\t\t\tsubTitle=\"\"\n\t\t\t// extra={\n\t\t\t// \t<Button type=\"primary\">\n\t\t\t// \t\t<Link to='/'>返回首页</Link>\n\t\t\t// \t</Button>\n\t\t\t// }\n\t\t/>\n\t)\n}\nexport default Notfind","\nimport React from 'react'\nimport { Switch, Route, Router } from '@friday/router'\nimport Home from './pages/home'\nimport NotFound from 'src/pages/exception/NotFound'\nimport AdminRouter from 'src/pages/admin/ModuleRouter'\nimport userRouter from 'src/pages/user/ModuleRouter'\n\nimport 'src/styles/index.less'\n\nconst App = ({ history }) => {\n  return (\n    <Router history={history}>\n      <Switch>\n        {/* <Route path=\"/404\"  component={NotFound} />  \n        <Route path=\"/admin\" component={AdminRouter} />  \n        <Route path=\"/user\" component={userRouter} />   */}\n        <Route path='/' exact component={NotFound} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n"],"sourceRoot":""}